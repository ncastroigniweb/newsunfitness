import { __decorate } from 'tslib';
import { ɵɵdefineInjectable, Injectable, EventEmitter, Input, Output, Component, NgModule } from '@angular/core';
import { Subject } from 'rxjs';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { IonicModule } from '@ionic/angular';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@ionic/angular';

const _c0 = function (a0, a1) { return { "width": a0, "height": a1 }; };
const _c1 = function (a0, a1) { return { "color": a0, "font-size": a1 }; };
function IonicRatingComponent_ion_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "ion-button", 2);
    ɵngcc0.ɵɵlistener("click", function IonicRatingComponent_ion_button_1_Template_ion_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.changeRating($event); });
    ɵngcc0.ɵɵelement(1, "ion-icon", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const index_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵpropertyInterpolate("id", index_r1);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction2(4, _c0, ctx_r0.fontSize, ctx_r0.fontSize));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate("name", ctx_r0.halfStar === "true" && ctx_r0.rating - index_r1 > 0 && ctx_r0.rating - index_r1 <= 0.5 ? ctx_r0.halfIcon : index_r1 < ctx_r0.Math.round(ctx_r0.parseFloat(ctx_r0.rating)) ? ctx_r0.activeIcon : ctx_r0.defaultIcon);
    ɵngcc0.ɵɵproperty("ngStyle", ɵngcc0.ɵɵpureFunction2(7, _c1, ctx_r0.halfStar === "false" && index_r1 < ctx_r0.Math.round(ctx_r0.parseFloat(ctx_r0.rating)) || ctx_r0.halfStar === "true" && index_r1 < ctx_r0.parseFloat(ctx_r0.rating) ? ctx_r0.activeColor : ctx_r0.defaultColor, ctx_r0.fontSize));
} }
let IonicRatingService = class IonicRatingService {
    constructor() {
        this.starRatingSubject = new Subject();
        this.topicSubject = new Subject();
    }
    publishStartRatingChanged(value) {
        this.starRatingSubject.next(value);
    }
    getStartRatingChangedObservable() {
        return this.starRatingSubject;
    }
    publishTopic(topic, value) {
        this.topicSubject.next({ topic, value });
    }
    getTopicObservable(key) {
        return this.topicSubject[key];
    }
};
IonicRatingService.ɵfac = function IonicRatingService_Factory(t) { return new (t || IonicRatingService)(); };
IonicRatingService.ɵprov = ɵɵdefineInjectable({ factory: function IonicRatingService_Factory() { return new IonicRatingService(); }, token: IonicRatingService, providedIn: "root" });

var IonicRatingComponent_1;
let IonicRatingComponent = IonicRatingComponent_1 = class IonicRatingComponent {
    constructor(ionicRatingService) {
        this.ionicRatingService = ionicRatingService;
        this.iconsArray = [];
        this.ratingChanged = new EventEmitter();
        this.readonly = 'false';
        this.activeColor = '#488aff';
        this.defaultColor = '#aaaaaa';
        this.activeIcon = 'star';
        this.defaultIcon = 'star-outline';
        this.halfIcon = 'star-half';
        this.halfStar = 'false';
        this.maxRating = 5;
        this.fontSize = '28px';
        this.eventInfo = (() => {
            const id = new Date().getTime();
            const topic = `star-rating:${id}:changed`;
            return {
                topic,
            };
        })();
        this.Math = Math;
        this.parseFloat = parseFloat;
    }
    set rating(val) {
        this._rating = val;
        if (this.onChange) {
            this.onChange(val);
        }
    }
    get rating() {
        return this._rating;
    }
    ngOnInit() {
        this.rating = this.rating || 3; //default after input`s initialization
        for (let i = 0; i < this.maxRating; i++) {
            this.iconsArray.push(i);
        }
    }
    writeValue(obj) {
        this.rating = obj;
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.readonly = isDisabled ? "true" : "false";
    }
    changeRating(event) {
        if (this.readonly && this.readonly === 'true')
            return;
        // event is different for firefox and chrome
        let id = event.target.id ? parseInt(event.target.id) : parseInt(event.target.parentElement.id);
        if (this.halfStar && this.halfStar === 'true') {
            this.rating = ((this.rating - id > 0) && (this.rating - id <= 0.5)) ? id + 1 : id + .5;
        }
        else {
            this.rating = id + 1;
        }
        // subscribe this event to get the changed value in your parent compoanent
        this.ionicRatingService.publishStartRatingChanged(this.rating);
        this.ionicRatingService.publishTopic(this.eventInfo.topic, this.rating);
        // unique event
        this.ratingChanged.emit(this.rating);
    }
};
IonicRatingComponent.ɵfac = function IonicRatingComponent_Factory(t) { return new (t || IonicRatingComponent)(ɵngcc0.ɵɵdirectiveInject(IonicRatingService)); };
IonicRatingComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: IonicRatingComponent, selectors: [["ionic-rating-component"]], inputs: { readonly: "readonly", activeColor: "activeColor", defaultColor: "defaultColor", activeIcon: "activeIcon", defaultIcon: "defaultIcon", halfIcon: "halfIcon", halfStar: "halfStar", maxRating: "maxRating", fontSize: "fontSize", rating: "rating" }, outputs: { ratingChanged: "ratingChanged" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: IonicRatingComponent_1,
                multi: true
            },
        ])], decls: 2, vars: 1, consts: [[1, "ionic5-star-rating"], ["size", "large", "fill", "clear", "class", "rate-button", 3, "ngStyle", "id", "click", 4, "ngFor", "ngForOf"], ["size", "large", "fill", "clear", 1, "rate-button", 3, "ngStyle", "id", "click"], [3, "ngStyle", "name"]], template: function IonicRatingComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, IonicRatingComponent_ion_button_1_Template, 2, 10, "ion-button", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.iconsArray);
    } }, directives: [ɵngcc1.NgForOf, ɵngcc2.IonButton, ɵngcc1.NgStyle, ɵngcc2.IonIcon], styles: [".rate-button[_ngcontent-%COMP%] {\n            --padding-bottom:0;\n            --padding-end:0;\n            --padding-start:0;\n            --padding-top:0;\n    }"] });
IonicRatingComponent.ctorParameters = () => [
    { type: IonicRatingService }
];
__decorate([
    Input()
], IonicRatingComponent.prototype, "rating", null);
__decorate([
    Output()
], IonicRatingComponent.prototype, "ratingChanged", void 0);
__decorate([
    Input()
], IonicRatingComponent.prototype, "readonly", void 0);
__decorate([
    Input()
], IonicRatingComponent.prototype, "activeColor", void 0);
__decorate([
    Input()
], IonicRatingComponent.prototype, "defaultColor", void 0);
__decorate([
    Input()
], IonicRatingComponent.prototype, "activeIcon", void 0);
__decorate([
    Input()
], IonicRatingComponent.prototype, "defaultIcon", void 0);
__decorate([
    Input()
], IonicRatingComponent.prototype, "halfIcon", void 0);
__decorate([
    Input()
], IonicRatingComponent.prototype, "halfStar", void 0);
__decorate([
    Input()
], IonicRatingComponent.prototype, "maxRating", void 0);
__decorate([
    Input()
], IonicRatingComponent.prototype, "fontSize", void 0);

let IonicRatingComponentModule = class IonicRatingComponentModule {
};
IonicRatingComponentModule.ɵfac = function IonicRatingComponentModule_Factory(t) { return new (t || IonicRatingComponentModule)(); };
IonicRatingComponentModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: IonicRatingComponentModule });
IonicRatingComponentModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[
            CommonModule,
            IonicModule,
        ]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IonicRatingService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IonicRatingComponent, [{
        type: Component,
        args: [{
                selector: 'ionic-rating-component',
                template: `
    <div class="ionic5-star-rating">
      <ion-button size="large" fill="clear" class="rate-button" [ngStyle]="{'width' : fontSize, 'height' : fontSize}" *ngFor="let index of iconsArray" id="{{index}}" (click)="changeRating($event)">
        <ion-icon [ngStyle]="{'color': ((halfStar === 'false' && index < this.Math.round(this.parseFloat(rating))) || (halfStar === 'true' && index < this.parseFloat(rating))) ? activeColor : defaultColor, 'font-size' : fontSize }" name="{{(halfStar ==='true' && (rating - index > 0) && (rating - index <= 0.5)) ? halfIcon : (index < this.Math.round(this.parseFloat(rating))) ? activeIcon : defaultIcon}}"></ion-icon>
      </ion-button>
    </div>
  `,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: IonicRatingComponent_1,
                        multi: true
                    },
                ],
                styles: [`
    .rate-button {
            --padding-bottom:0;
            --padding-end:0;
            --padding-start:0;
            --padding-top:0;
    }
  `]
            }]
    }], function () { return [{ type: IonicRatingService }]; }, { ratingChanged: [{
            type: Output
        }], readonly: [{
            type: Input
        }], activeColor: [{
            type: Input
        }], defaultColor: [{
            type: Input
        }], activeIcon: [{
            type: Input
        }], defaultIcon: [{
            type: Input
        }], halfIcon: [{
            type: Input
        }], halfStar: [{
            type: Input
        }], maxRating: [{
            type: Input
        }], fontSize: [{
            type: Input
        }], rating: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(IonicRatingComponentModule, { declarations: function () { return [IonicRatingComponent]; }, imports: function () { return [CommonModule,
        IonicModule]; }, exports: function () { return [IonicRatingComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(IonicRatingComponentModule, [{
        type: NgModule,
        args: [{
                declarations: [IonicRatingComponent],
                imports: [
                    CommonModule,
                    IonicModule,
                ],
                exports: [IonicRatingComponent]
            }]
    }], null, null); })();

/*
 * Public API Surface of ionic-rating
 */

/**
 * Generated bundle index. Do not edit.
 */

export { IonicRatingComponent, IonicRatingComponentModule, IonicRatingService };

//# sourceMappingURL=ionic-rating-component.js.map